Description: >
  This deploys a long running ECS service (i.e. web service).

Parameters:
  VPCId:
    Description: The VPC that the ECS cluster is deployed to
    Type: AWS::EC2::VPC::Id

  Cluster:
    Description: Please provide the ECS Cluster ID that this service should run on
    Type: String

  ContainerName:
    Description: Please provide the Container Name for the service to run within
    Type: String

  Image:
    Description: ECR Image to deploy
    Type: String

  ContainerPort:
    Description: Please provide the Container Port
    Type: Number

  DesiredCount:
    Description: How many instances of this task should we run across our cluster?
    Type: Number

  MinHealthyPct:
    Description: The minimum healthy instances as a percentage
    Type: Number

  Ac2Code:
    Description: AC2 Code for Billing Purposes
    Type: String

  Listener:
    Description: The Application Load Balancer listener to register with
    Type: String

  ServiceDomain:
    Description: The path to register with the Application Load Balancer
    Type: String

  ECSHostSecurityGroupId:
    Description: The security group id of the ECS Host
    Type: String

  DBSecurityGroupId:
    Description: The security group id of the Database the service connects to
    Type: String

  DBPort:
    Type: String
    Default: "5432"

  HostedZoneName:
    Type: String
    Description : The DNS name of an existing Amazon Route 53 hosted zone

  LoadBalancerDNS:
    Type: String
    Description : The DNS name of the load balancer attached to the cluster

  LoadBalancerHostedZone:
    Type: String
    Description: The hosted zone id of the load balancer

Resources:
  Service:
    Type: AWS::ECS::Service
    DependsOn: ListenerRule
    Properties:
      Cluster: !Ref Cluster
      ServiceName: !Ref ContainerName
      Role: !Ref ServiceRole
      DesiredCount: !Ref DesiredCount
      DeploymentConfiguration:
        MaximumPercent: 100
        MinimumHealthyPercent: !Ref MinHealthyPct
      TaskDefinition: !Ref TaskDefinition
      LoadBalancers:
        - ContainerName: !Ref ContainerName
          ContainerPort: !Ref ContainerPort
          TargetGroupArn: !Ref TargetGroup
      Tags:
        - Key: ac2_code
          Value: !Ref Ac2Code

  TaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Family: !Ref ContainerName
      Tags:
        - Key: ac2_code
          Value: !Ref Ac2Code
      ContainerDefinitions:
        - Name: !Ref ContainerName
          Essential: true
          Image: !Ref Image
          Memory: 1024
          PortMappings:
            - ContainerPort: !Ref ContainerPort
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Ref CloudWatchLogsGroup
              awslogs-region: !Ref AWS::Region

  CloudWatchLogsGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Ref AWS::StackName
      RetentionInDays: 365

  TargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      VpcId: !Ref VPCId
      Port: 443
      Protocol: HTTP
      Matcher:
        HttpCode: 200-299,404
      HealthCheckIntervalSeconds: 30
      HealthCheckPath: /
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 15
      HealthyThresholdCount: 2

  ListenerRule:
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    Properties:
      ListenerArn: !Ref Listener
      Priority: 4
      Conditions:
        - Field: host-header
          Values:
            - !Ref ServiceDomain
      Actions:
        - TargetGroupArn: !Ref TargetGroup
          Type: forward

  RDSSecurityGroup:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      Description: !Sub ${ContainerName} Lambda Access
      IpProtocol: "tcp"
      FromPort: !Ref DBPort
      ToPort: !Ref DBPort
      GroupId: !Ref DBSecurityGroupId
      SourceSecurityGroupId: !Ref ECSHostSecurityGroupId

  APIDomain:
    Type: AWS::Route53::RecordSetGroup
    Properties:
      HostedZoneName: !Sub ${HostedZoneName}.
      RecordSets:
        - Name: !Ref ServiceDomain
          Type: A
          AliasTarget:
            DNSName: !Sub dualstack.${LoadBalancerDNS}
            HostedZoneId: !Ref LoadBalancerHostedZone

  ServiceRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub ecs-service-${AWS::StackName}
      PermissionsBoundary: !Sub arn:aws:iam::${AWS::AccountId}:policy/ent/ent-permissions-boundary
      Path: /
      AssumeRolePolicyDocument: |
        {
            "Statement": [{
                "Effect": "Allow",
                "Principal": { "Service": [ "ecs.amazonaws.com" ]},
                "Action": [ "sts:AssumeRole" ]
            }]
        }
      Policies:
        - PolicyName: !Sub ecs-service-${AWS::StackName}
          PolicyDocument:
            {
              "Version": "2012-10-17",
              "Statement":
                [
                {
                  "Effect": "Allow",
                  "Action":
                    [
                      "ec2:AuthorizeSecurityGroupIngress",
                      "ec2:Describe*",
                      "elasticloadbalancing:DeregisterInstancesFromLoadBalancer",
                      "elasticloadbalancing:Describe*",
                      "elasticloadbalancing:RegisterInstancesWithLoadBalancer",
                      "elasticloadbalancing:DeregisterTargets",
                      "elasticloadbalancing:DescribeTargetGroups",
                      "elasticloadbalancing:DescribeTargetHealth",
                      "elasticloadbalancing:RegisterTargets",
                      "secretsmanager:GetSecretValue",
                      "secretsmanager:GetSecret",
                      "secretsmanager:DescribeSecret",
                      "secretsmanager:ListSecrets",
                    ],
                  "Resource": "*"
                }
                ]
            }